<%#-- copyright
OpenProject is an open source project management software.
Copyright (C) 2012-2023 the OpenProject GmbH

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License version 3.

OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
Copyright (C) 2006-2013 Jean-Philippe Lang
Copyright (C) 2010-2013 the ChiliProject Team

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

See COPYRIGHT and LICENSE files for more details.

++#%>
<!-- Standard Ruby view, please see the controller for comments -->
<% html_title t(:label_administration), t('project_module_storages'), t(@object.name) -%>
<% local_assigns[:additional_breadcrumb] = @object.name %>

<%= toolbar title: @object.name,
            title_class: 'no-padding-bottom' do %>
  <li class="toolbar-item">
    <%= link_to edit_admin_settings_storage_path(@object),
                class: 'button' do %>
      <%= op_icon('button--icon icon-edit') %>
      <span class="button--text"><%= t(:button_edit) %></span>
    <% end %>
  </li>
  <li class="toolbar-item">
    <%= link_to admin_settings_storage_path(@object),
                method: :delete,
                data: { confirm: I18n.t('storages.delete_warning.storage') },
                class: 'button -danger' do %>
      <%= op_icon('button--icon icon-delete') %>
      <span class="button--text"><%= t(:button_delete) %></span>
    <% end %>
  </li>
<% end %>

<% if @object.projects.empty? %>
  <div class="op-toast -warning -with-bottom-spacing">
    <div class="op-toast--content">
      <p>
        <%= t('repositories.storage.show_warning_details') %>
      </p>
    </div>
  </div>
<% end %>

<%= render(AttributeGroups::AttributeGroupComponent.new) do |component| %>
  <% component.with_header(title: t(:label_general)) %>

  <% component.with_attributes([
      { key: t(:'storages.label_name'), value: @object.name },
      { key: t(:'storages.label_provider_type'), value: t(:"storages.provider_types.#{@object.short_provider_type}.name") },
      { key: t(:'storages.label_host'), value: link_to(@object.host, @object.host) },
      { key: t(:'storages.label_creator'), value: @object.creator.name },
      { key: Storages::ProjectStorage.human_attribute_name(:created_at), value: format_time(@object.created_at) }
  ]) %>
<% end %>

<% if @object.oauth_application %>
  <%= render(AttributeGroups::AttributeGroupComponent.new) do |component| %>
    <% component.with_header(title: "OpenProject #{t(:'storages.label_oauth_application_details')}") %>

    <% component.with_attributes([
      { key: "OpenProject #{Storages::Admin::LABEL_OAUTH_CLIENT_ID}", value: @object.oauth_application.uid },
      { key: "OpenProject #{Storages::Admin::LABEL_OAUTH_CLIENT_SECRET}", value: "●●●●●●●●●●●●●●●●" },
    ]) %>
  <% end %>
<% end %>

<%= render(AttributeGroups::AttributeGroupComponent.new) do |component| %>
  <% component.with_header(title: "#{t("storages.provider_types.#{@object.short_provider_type}.name")} #{t(:'storages.label_oauth_client_details')}") %>

  <% if @object.oauth_client %>
    <% component.with_attributes([
      { key: "#{t("storages.provider_types.#{@object.short_provider_type}.name")} #{Storages::Admin::LABEL_OAUTH_CLIENT_ID}",
        value: @object.oauth_client.client_id },
      { key: "#{t("storages.provider_types.#{@object.short_provider_type}.name")} #{Storages::Admin::LABEL_OAUTH_CLIENT_SECRET}",
        value: short_secret(@object.oauth_client.client_secret) },
    ]) %>
  <% else %>
    <% t(:'storages.oauth_client_details_missing') %>
  <% end %>
<% end %>


<%= render(AttributeGroups::AttributeGroupComponent.new) do |component| %>
  <% component.with_header(title: t("storages.page_titles.managed_project_folders.title")) %>

  <% if @object.automatic_management_unspecified? %>
    <%= t("storages.automatically_managed_project_folder_missing") %>
  <% else %>
    <% component.with_attribute(
      key: t(:"storages.label_managed_project_folders.automatically_managed_folders"),
      value: @object.automatically_managed? ? t(:"storages.label_active") : t(:"storages.label_inactive")
    ) %>

    <% if @object.automatically_managed? %>
      <% component.with_attribute(
        key: t(:"storages.label_managed_project_folders.application_password"),
        value: "●●●●●●●●●●●●●●●●"
      ) %>
    <% end %>
  <% end %>
<% end %>

